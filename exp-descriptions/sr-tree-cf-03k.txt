@import("import/sr-tree-representation.txt")
@import("import/sr-indexes.txt")
@import("import/eas.txt")

$qF = f.mapValue(key = mse; format = "%5.3f")

ea.experiment(
  runs = (randomGenerator = (seed = [1:1:1]) * [m.defaultRG()]) *
    (problem = [
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.synthetic(name = "keijzer6"));
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.synthetic(name = "nguyen7"));
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.synthetic(name = "vladislavleva4"));
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.bundled(name = "concrete"; xScaling = standardization; yScaling = symmetric_min_max));
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.bundled(name = "wine"; xScaling = standardization; yScaling = symmetric_min_max));
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.bundled(name = "energy-efficiency"; xScaling = standardization; yScaling = symmetric_min_max))
    ]) *
    (solver = (stop = ea.sc.cumulativeFidelity(v = 1000)) * [
      $mfMeLinear05;
      $mfMeHalf;
      $me;
      $ga
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()); format = "%6.2f");
        f.composition(of = f.iApply(of = ea.f.solution(of = ea.f.best()); iF = ea.f.qualityFunction(of = ea.f.problem())); then = $qF);
        f.mapValue(key = mse; of = ea.f.validationQuality(); format = "%6.2f");
        f.composition(of = f.iApply(of = ea.f.solution(of = ea.f.best()); iF = ea.f.validationQualityFunction(of = ea.f.problem())); then = $qF);
        ea.f.cumulativeFidelity();
        ea.f.archiveCoverage(of = $cArchive);
        $qdScore;
        $valQdScore;
        ea.f.timestamp()
      ];
      onlyLast = true
    );

    % ========= BOX PLOTS
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-best-fitness.svg";
      plot = ea.plot.multi.qualityBoxplot(q = f.mapValue(key = mse));
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-best-validation.svg";
      plot = ea.plot.multi.yBoxplotExp(y = f.mapValue(key = mse; of = ea.f.validationQuality()));
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-coverage.svg";
      plot = ea.plot.multi.yBoxplotExp(y = ea.f.archiveCoverage(of = $cArchive));
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-qd-score.svg";
      plot = ea.plot.multi.yBoxplotExp(y = $qdScore);
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-validation-qd-score.svg";
      plot = ea.plot.multi.yBoxplotExp(y = $valQdScore);
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-elapsed.svg";
      plot = ea.plot.multi.yBoxplotExp(y = ea.f.elapsedSecs());
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-cf.svg";
      plot = ea.plot.multi.yBoxplotExp(y = ea.f.cumulativeFidelity());
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-evals.svg";
      plot = ea.plot.multi.yBoxplotExp(y = ea.f.nOfEvals());
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );

    % ========= SCATTER PLOTS
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-best-fitness-vs-elapsed.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.elapsedSecs();
        y = f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()))
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-qd-score-vs-elapsed.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.elapsedSecs();
        y = $qdScore
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-best-validation-vs-elapsed.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.elapsedSecs();
        y = f.mapValue(key = mse; of = ea.f.validationQuality())
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-best-fitness-vs-cf.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.cumulativeFidelity();
        y = f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()))
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-qd-score-vs-cf.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.cumulativeFidelity();
        y = $qdScore
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-best-validation-vs-cf.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.cumulativeFidelity();
        y = f.mapValue(key = mse; of = ea.f.validationQuality())
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-best-fitness-vs-evals.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.nOfEvals();
        y = f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()))
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-best-validation-vs-evals.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.nOfEvals();
        y = f.mapValue(key = mse; of = ea.f.validationQuality())
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );

    % ========= ARCHIVE PLOTS
    ea.l.savePlotForRun(
      path = "./exp-results/{name}/{startTime}/{run.solver.name}/{run.problem.name}/{run.randomGenerator.seed}-computed-archive.svg";
      plot = ea.plot.single.gridRun(
        values = [f.mapValue(key = mse; of = ea.f.quality())];
        grids = [ea.f.archiveToGrid(of = $cArchive)]
      );
      type = svg
    );
    ea.l.savePlotAndCsvForRun(
      path = "./exp-results/{name}/{startTime}/{run.solver.name}/{run.problem.name}/{run.randomGenerator.seed}-archive.svg";
      plot = ea.plot.single.me(
        q = f.mapValue(key = mse)
      );
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = ".*me.*");
      type = svg
    );
    ea.l.savePlotAndCsvForRun(
      path = "./exp-results/{name}/{startTime}/{run.solver.name}/{run.problem.name}/{run.randomGenerator.seed}-fidelity-archive.svg";
      plot = ea.plot.single.gridRun(
        values = [ea.f.mfMeLsFidelity()];
        grids = [ea.f.archiveToGrid(of = ea.f.mfMeFidelityArchive())]
      );
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "mf-me.*");
      type = svg
    );
    ea.l.savePlotAndCsvForRun(
      path = "./exp-results/{name}/{startTime}/{run.solver.name}/{run.problem.name}/{run.randomGenerator.seed}-cum-fidelity-archive.svg";
      plot = ea.plot.single.gridRun(
        values = [ea.f.mfMeLsCumulativeFidelity()];
        grids = [ea.f.archiveToGrid(of = ea.f.mfMeFidelityArchive())]
      );
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "mf-me.*");
      type = svg
    )

  ]
)
