$desc1 = ea.s.me.d.descriptor(f = f.size(of = f.filter(of = ea.f.treeLeaves(of = ea.f.genotype()); condition = ea.predicate.isSrConstant())); min = 1; max = 64; nOfBins = 8)
$desc2 = ea.s.me.d.descriptor(f = f.size(of = f.filter(of = ea.f.treeLeaves(of = ea.f.genotype()); condition = ea.predicate.isSrVariable())); min = 1; max = 64; nOfBins = 8)

$representation = ea.r.srTree()
$mapper = ea.m.srTreeToNurf()

ea.experiment(
  runs = (nOfThreads = [1:1:16]) * (randomGenerator = (seed = [1:1:30]) * [m.defaultRG()]) *
    (problem = [
	ea.p.moToSo(objective = mse; moProblem = ea.p.ur.synthetic(name = "keijzer6"));
	ea.p.moToSo(objective = mse; moProblem = ea.p.ur.bundled(name = "wine"; xScaling = standardization; yScaling = symmetric_min_max))
    ]) *
    (solver = (stop = ea.sc.elapsed(v = 3)) * [
      ea.s.asyncScheduledMfMapElites(
        name = "mf-me-linear-0.5";
        schedule = ea.schedule.linear(min = 0; max = 1);
        recomputationRatio = 0.5;
        representation = $representation;
        mapper = $mapper;
        descriptors = [$desc1; $desc2]
      );
      ea.s.mapElites(
        name = "me";
        representation = $representation;
        mapper = $mapper;
        descriptors = [$desc1; $desc2]
      );
      ea.s.ga(
        name = "ga";
        representation = $representation;
        mapper = $mapper
      )
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      runFunctions = [ea.f.runKey(key = "run.nOfThreads")];
      functions = [
        ea.f.cumulativeFidelity();
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()); format = "%6.2f");
        f.percentile(of = f.each(of = ea.f.all(); mapF = f.mapValue(key = mse; of = ea.f.quality())); p = 75; format = "%6.2f");
        ea.f.hist(of = f.each(of = ea.f.all(); mapF = f.mapValue(key = mse; of = ea.f.quality())));
        f.mapValue(key = mse; of = ea.f.validationQuality(); format = "%6.2f");
        ea.f.timestamp()
      ];
      onlyLast = true
    );
    ea.l.savePlotAndCsvForExp(
      path = "./exp-results/{name}/{startTime}/final-cumulative-fidelity.svg";
      plot = ea.plot.multi.xyExp(
        ySubplot = ea.f.runString(name = solver; s = "{run.solver.name}");
        x = ea.f.asDouble(of = ea.f.runKey(key = "run.nOfThreads"));
        y = ea.f.cumulativeFidelity();
        useRunForX = true
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]; linesMarkers = true);
      type = svg
    )
 ]
)
