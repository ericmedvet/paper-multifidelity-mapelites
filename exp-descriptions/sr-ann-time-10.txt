$wt=1
$nwt=-1
$thresholdDesc1 = ea.s.me.d.descriptor(
  f = f.mathOp(
    op = divide;
    args = [
      f.size(of = f.filter(condition = predicate.all(conditions = [predicate.lt(t = 0.5); predicate.gt(t = -0.5)])));
      f.size()
    ];
    of = f.flat(of = f.nTh(of = ds.f.weights(of = ds.f.inner(of = ds.f.inner(of = ea.f.solution()))); n = 0))
  );
  min = 0.0;
  max = 1.0;
  nOfBins = 8
)
$thresholdDesc2 = ea.s.me.d.descriptor(
  f = f.mathOp(
    op = divide;
    args = [
      f.size(of = f.filter(condition = predicate.all(conditions = [predicate.lt(t = 0.5); predicate.gt(t = -0.5)])));
      f.size()
    ];
    of = f.flat(of = f.nTh(of = ds.f.weights(of = ds.f.inner(of = ds.f.inner(of = ea.f.solution()))); n = 1))
  );
  min = 0.0;
  max = 1.0;
  nOfBins = 8
)
$varDesc1 = ea.s.me.d.descriptor(
  f = f.avg(of = f.each(
    of = f.nTh(of = ds.f.weights(of = ds.f.inner(of = ds.f.inner(of = ea.f.solution()))); n = 0);
    mapF = f.sd()
  ));
  min = 0.0;
  max = 3.0;
  nOfBins = 8
)
$varDesc2 = ea.s.me.d.descriptor(
  f = f.avg(of = f.each(
    of = f.nTh(of = ds.f.weights(of = ds.f.inner(of = ds.f.inner(of = ea.f.solution()))); n = 1);
    mapF = f.sd()
  ));
  min = 0.0;
  max = 3.0;
  nOfBins = 8
)

$representation = ea.r.doubleString()
$mapper = ea.m.nmrfToNurf(of = ea.m.dsToNmrf(npmrf = ds.num.mlp(innerLayers = [8])))

ea.experiment(
  runs = (randomGenerator = (seed = [1:1:1]) * [m.defaultRG()]) *
    (problem = [
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.bundled(name = "concrete"; xScaling = standardization; yScaling = symmetric_min_max));
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.bundled(name = "wine"; xScaling = standardization; yScaling = symmetric_min_max));
      ea.p.moToSo(objective = mse; moProblem = ea.p.ur.bundled(name = "energy-efficiency"; xScaling = standardization; yScaling = symmetric_min_max))
    ]) *
    (solver = (stop = ea.sc.elapsed(v = 3)) * [
      ea.s.asyncScheduledMfMapElites(
        name = "mf-me-linear-0.5-thresh";
        schedule = ea.schedule.linear(min = 0; max = 1);
        recomputationRatio = 0.5;
        representation = $representation;
        mapper = $mapper;
        descriptors = [$thresholdDesc1; $thresholdDesc2]
      );
      ea.s.asyncScheduledMfMapElites(
        name = "mf-me-half-linear-thresh";
        schedule = ea.schedule.evenPiecewise(values = [0; 1; 1]);
        representation = $representation;
        mapper = $mapper;
        descriptors = [$thresholdDesc1; $thresholdDesc2]
      );
      ea.s.mapElites(
        name = "me-thresh";
        representation = $representation;
        mapper = $mapper;
        descriptors = [$thresholdDesc1; $thresholdDesc2]
      );
      ea.s.asyncScheduledMfMapElites(
        name = "mf-me-linear-0.5-var";
        schedule = ea.schedule.linear(min = 0; max = 1);
        recomputationRatio = 0.5;
        representation = $representation;
        mapper = $mapper;
        descriptors = [$varDesc1; $varDesc2]
      );
      ea.s.asyncScheduledMfMapElites(
        name = "mf-me-half-linear-var";
        schedule = ea.schedule.evenPiecewise(values = [0; 1; 1]);
        representation = $representation;
        mapper = $mapper;
        descriptors = [$varDesc1; $varDesc2]
      );
      ea.s.mapElites(
        name = "me-var";
        representation = $representation;
        mapper = $mapper;
        descriptors = [$varDesc1; $varDesc2]
      );
      ea.s.ga(
        name = "ga";
        representation = $representation;
        mapper = $mapper
      )
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()); format = "%6.2f");
        f.mapValue(key = mse; of = ea.f.validationQuality(); format = "%6.2f");
        ea.f.cumulativeFidelity();
        ea.f.archiveCoverage(of = ea.f.meArchive());
        f.avg(of = f.each(of = ea.f.all(); mapF = f.mapValue(key = mse; of = ea.f.quality())))
      ];
      onlyLast = true
    );

    % ========= CONVERGENCE PLOTS
    ea.l.savePlotForRun(
      path = "./exp-results/{name}/{startTime}/best-fitness.svg";
      plot = ea.plot.multi.quality(q = f.mapValue(key = mse); x = f.quantized(of = ea.f.elapsedSecs(); q = 0.25));
      overwrite = true;
      type = svg
    );
    ea.l.savePlotForRun(
      path = "./exp-results/{name}/{startTime}/best-validation.svg";
      plot = ea.plot.multi.xyExp(y = f.mapValue(key = mse; of = ea.f.validationQuality()); x = f.quantized(of = ea.f.elapsedSecs(); q = 0.25));
      overwrite = true;
      type = svg
    );

    % ========= BOX PLOTS
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-coverage.svg";
      plot = ea.plot.multi.yBoxplotExp(y = ea.f.archiveCoverage(of = ea.f.meArchive()));
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = ".*me.*");
      type = svg
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-best-fitness.svg";
      plot = ea.plot.multi.qualityBoxplot(q = f.mapValue(key = mse));
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-best-validation.svg";
      plot = ea.plot.multi.yBoxplotExp(y = f.mapValue(key = mse; of = ea.f.validationQuality()));
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-elapsed.svg";
      plot = ea.plot.multi.yBoxplotExp(y = ea.f.elapsedSecs());
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-cf.svg";
      plot = ea.plot.multi.yBoxplotExp(y = ea.f.cumulativeFidelity());
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-evals.svg";
      plot = ea.plot.multi.yBoxplotExp(y = ea.f.nOfEvals());
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      type = svg
    );

    % ========= SCATTER PLOTS
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-best-fitness-vs-elapsed.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.elapsedSecs();
        y = f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()))
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-best-validation-vs-elapsed.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.elapsedSecs();
        y = f.mapValue(key = mse; of = ea.f.validationQuality())
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotForRun(
      path = "./exp-results/{name}/{startTime}/final-best-fitness-vs-cf.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.cumulativeFidelity();
        y = f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()))
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg;
      overwrite = true
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-best-validation-vs-cf.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.cumulativeFidelity();
        y = f.mapValue(key = mse; of = ea.f.validationQuality())
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-best-fitness-vs-evals.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.nOfEvals();
        y = f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()))
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );
    ea.l.savePlotForExp(
      path = "./exp-results/{name}/{startTime}/final-best-validation-vs-evals.svg";
      plot = ea.plot.multi.scatterExp(
        x = ea.f.nOfEvals();
        y = f.mapValue(key = mse; of = ea.f.validationQuality())
      );
      configuration = ea.plot.conf.image(axesShow = all; axesIndependences = [all]);
      secondary = true;
      type = svg
    );

    % ========= ARCHIVE PLOTS
    ea.l.savePlotForRun(
      path = "./exp-results/{name}/{startTime}/{run.solver.name}/{run.problem.name}/{run.randomGenerator.seed}-archive.svg";
      plot = ea.plot.single.me(
        q = f.mapValue(key = mse)
      );
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = ".*me.*");
      type = svg
    );
    ea.l.savePlotForRun(
      path = "./exp-results/{name}/{startTime}/{run.solver.name}/{run.problem.name}/{run.randomGenerator.seed}-fidelity-archive.svg";
      plot = ea.plot.single.gridRun(
        values = [ea.f.mfMeLsFidelity()];
        grids = [ea.f.archiveToGrid(of = ea.f.mfMeFidelityArchive())]
      );
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "mf-me.*");
      type = svg
    );
    ea.l.savePlotForRun(
      path = "./exp-results/{name}/{startTime}/{run.solver.name}/{run.problem.name}/{run.randomGenerator.seed}-cum-fidelity-archive.svg";
      plot = ea.plot.single.gridRun(
        values = [ea.f.mfMeLsCumulativeFidelity()];
        grids = [ea.f.archiveToGrid(of = ea.f.mfMeFidelityArchive())]
      );
      condition = predicate.matches(f = ea.f.runKey(key = "run.solver.name"); regex = "mf-me.*");
      type = svg
    );

    % ========= TRAJECTORY PLOTS
    ea.l.savePlotForRun(
      path = "./exp-results/{name}/{startTime}/{run.solver.name}/{run.problem.name}/{run.randomGenerator.seed}-trajectory.svg";
      plot = ea.plot.single.xyrsRun(
        x = ea.f.cumulativeFidelity();
        ys = [
          f.mapValue(key = mse; of = ea.f.quality(of = ea.f.best()));
          f.mapValue(key = mse; of = ea.f.validationQuality())
        ]
      );
      type = svg
    )
  ]
)
